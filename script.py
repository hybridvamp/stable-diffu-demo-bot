import os
import telethon
import replicate

# Set up the replicate client
api_token = os.environ["REPLICATE_API_TOKEN"]
replicate.api_key = api_token

# Set up the Telethon client
bot_token = os.environ["BOT_TOKEN"]
client = telethon.TelegramClient(bot_token=bot_token)

# Connect to Telegram and print the bot's username
client.start()
print(client.get_me().username)

# Define the model and version to use
model = replicate.models.get("stability-ai/stable-diffusion")
version = model.versions.get("f178fa7a1ae43a9a9af01b833b9d2ecf97b1bcb0acfd2dc5dd04895e042863f1")

@client.on(telethon.events.NewMessage(pattern=r"/start"))
async def start_message(event):
    await event.respond("Hello! I'm a bot that uses the stable diffusion API to generate images based on user input. To use me, send me a message in the following format:\n\n/generate [prompt]\n\nFor example:\n\n/generate a photo of a cat wearing a hat")

@client.on(telethon.events.NewMessage(pattern=r"/help"))
async def help_message(event):
    await event.respond("To use me, send me a message in the following format:\n\n/generate [prompt]\n\nFor example:\n\n/generate a photo of a cat wearing a hat\n\nI will respond with an image generated by the stable diffusion API based on the given prompt.")

@client.on(telethon.events.NewMessage(pattern=r"/generate"))
async def generate_image(event):
    # Get the prompt from the message
    prompt = event.message.text.split(" ", 1)[1]
    
    # Send a progress message
    progress_message = await event.respond("Generating image...")
    
    # Use the model to generate an image
    output = version.predict(prompt=prompt)
    
    # Update the progress message with the generated image
    await progress_message.edit(output[0])

# Run the bot
client.run_until_disconnected()
